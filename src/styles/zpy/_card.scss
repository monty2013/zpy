/*
 * base dimensions
 */

@use "dims";

@use "common/rhythm";

$-svg-card-width: 239.0;
$-svg-card-height: 335.0;
$-svg-bounding-box-width: 264.0;
$-svg-bounding-box-height: 360.0;
$-svg-padding: 12.5;
$-svg-border-radius: 12.0;

$aspect-ratio: $-svg_card_width / $-svg_card_height;

$width-hand: rhythm.px-to-rem(100px);
$width-friend: rhythm.px-to-rem(80px);
$width-play: rhythm.px-to-rem(72px);
$width-score: rhythm.px-to-rem(48px);
$clip: 0.25;

///////////////////////////////////////////////////////////////////////////////

// get the proportional card height for a given width
@function height-for($width) {
  @return $width / $aspect-ratio;
}

// extra padding for a container that holds clipped cards (to account for the
// unclipped portion of the last card)
@function container-padding($rh-lines, $card-dim, $clip-pct: $clip) {
  @return rhythm.rh($rh-lines) + (1 - $clip-pct) * $card-dim + rhythm.$px;
}

// mixin wrappers for container-padding
@mixin container($side, $rh-lines, $card-dim, $clip-pct) {
  padding: rhythm.rh($rh-lines);
  padding-#{$side}: container-padding($rh-lines, $card-dim, $clip-pct);
}
@mixin container-h($rh-lines, $card-width, $clip-pct: $clip) {
  @include container("right", $rh-lines, $card-width, $clip-pct);
}
@mixin container-v($rh-lines, $card-height, $clip-pct: $clip) {
  @include container("bottom", $rh-lines, $card-height, $clip-pct);
}

// total dimension of $n clipped cards; keep synced with CardFan
@function fit($n, $card-dim, $clip-pct: $clip) {
  @return (
    ($card-dim * $clip-pct + 2 * rhythm.$px) * $n +
    $card-dim * (1 - $clip-pct) + rhythm.$px
  );
}

///////////////////////////////////////////////////////////////////////////////

// for a given desired background image size, get the appropriate size
// dimensions for the svg, factoring in the bounding boxes
@function -bg-width($width) {
  @return $width * $-svg-bounding-box-width / $-svg-card-width;
}
@function -bg-height($height) {
  @return $height * $-svg-bounding-box-height / $-svg-card-height;
}

// for a given desired background image size, get the necessary offset from the
// edge of the svg's bounding box
@function -bg-off-x($width) {
  @return -$width * $-svg-padding / $-svg-card-width;
}
@function -bg-off-y($height) {
  @return -$height * $-svg-padding / $-svg-card-height;
}

// get the scaled border radius for the desired background image size
@function -bg-border-radius($width) {
  @return $width * $-svg-border-radius / $-svg-card-width + rhythm.$px;
}

@mixin card-shared($width: $def-width) {
  background-size: -bg-width($width) -bg-height($width / $aspect-ratio);
  background-position: -bg-off-x($width) -bg-off-y($width / $aspect-ratio);
  border-radius: -bg-border-radius($width);
}
